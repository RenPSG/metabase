name: Ren Build + Docker Uberjar

on:
  push:
    branches:
      - 'ren-**'

jobs:
  build:
    name: Build MB ${{ matrix.edition }}
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    strategy:
      matrix:
        edition: [ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # IMPORTANT! to get all the tags
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare back-end environment
      uses: ./.github/actions/prepare-backend
      with:
        m2-cache-key: uberjar
    - name: Build
      run: ./bin/build.sh
    - name: Prepare uberjar artifact
      uses: ./.github/actions/prepare-uberjar-artifact

  check_jar_health:
    runs-on: ubuntu-22.04
    name: Is ${{ matrix.edition }} (java ${{ matrix.java-version }}) healthy?
    needs: build
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [ee]
        java-version: [11, 17]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v3
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - run: java -version
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Launch uberjar
      run: java -jar ./target/uberjar/metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  containerize_test_and_push_container:
    runs-on: ubuntu-22.04
    needs: check_jar_health
    strategy:
      matrix:
        edition: [ee]
    timeout-minutes: 15
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    env:
      REN_DOCKER_SERVER: 442476910656.dkr.ecr.us-west-2.amazonaws.com
    steps:
    - name: Extract and clean branch name
      shell: bash
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^-._a-zA-Z0-9]/-/g')" >> $GITHUB_OUTPUT
      id: extract_branch
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # IMPORTANT! to get all the tags
    - name: Extract Metabase SEMVER
      shell: bash
      run: echo "semver=$(git describe --abbrev=0 --tags | cut -c 2-)" >> $GITHUB_OUTPUT
      id: extract_semver
    - name: Download uploaded artifacts to insert into container
      uses: actions/download-artifact@v3
      with:
        name: metabase-${{ matrix.edition }}-uberjar
        path: bin/docker/
    - name: Move the ${{ matrix.edition }} uberjar to the context dir
      run: mv bin/docker/target/uberjar/metabase.jar bin/docker/.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2.5.0
      with:
        driver-opts: network=host
    - name: Build ${{ matrix.edition }} container
      uses: docker/build-push-action@v3
      with:
        context: bin/docker/.
        platforms: linux/amd64
        network: host
        tags: localhost:5000/metabase-dev:${{ steps.extract_branch.outputs.branch }}-${{ matrix.edition }}
        no-cache: true
        push: true
    - name: Launch ${{ matrix.edition }} container
      run: docker run --rm -dp 3000:3000 localhost:5000/metabase-dev:${{ steps.extract_branch.outputs.branch }}-${{ matrix.edition }}
      timeout-minutes: 5
    - name: Is Docker running?
      run: docker ps
    - name: Wait for Metabase to start and reach 100% health
      run: while ! curl -s 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done
      timeout-minutes: 3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.PINKALOO_DEV_METABASE_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PINKALOO_DEV_METABASE_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Retag and push images if Ren release branch
      run: docker tag localhost:5000/metabase-dev:${{ steps.extract_branch.outputs.branch }}-ee ${{ env.REN_DOCKER_SERVER }}/metabase:${{ steps.extract_semver.outputs.semver }}.${{ github.run_number }} && docker push ${{ env.REN_DOCKER_SERVER }}/metabase:${{ steps.extract_semver.outputs.semver }}.${{ github.run_number }}
